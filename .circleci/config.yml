aliases:
  - &restore-npm-cache
    key: v1-dependencies-{{ checksum "yarn.lock" }}
    name: Restoring node_modules/ cache
  - &save-npm-cache
    key: v1-dependencies-{{ checksum "yarn.lock" }}
    name: Saving node_modules/ cache
    paths:
      - node_modules
      - packages/gimbal/node_modules

docker-defaults: &docker-defaults
  docker:
    - image: circleci/node:10

defaults: &defaults
  <<: *docker-defaults
  working_directory: ~/repo

version: 2.1

executors:
  docker-publisher:
    <<: *docker-defaults
    environment:
      IMAGE_NAME: moduscreate/gimbal

jobs:
  build:
    <<: *defaults
    steps:
      - checkout
      - restore_cache: *restore-npm-cache
      - run: yarn build
      - run:
          name: Test Gimbal CLI Help
          command: node packages/gimbal/bin/index.js --help
      - run:
          name: Test Gimbal CLI Version
          command: node packages/gimbal/bin/index.js --version

  build-docker:
      <<: *defaults
      executor: docker-publisher
      steps:
        - checkout
        - setup_remote_docker
        - run:
            name: Build Docker image
            command: |
              docker build -t $IMAGE_NAME:latest packages/gimbal
        - run:
            name: Archive Docker image
            command: docker save -o gimbal.tar $IMAGE_NAME
        - persist_to_workspace:
            root: .
            paths:
              - ./gimbal.tar

  install-dependencies:
    <<: *defaults
    steps:
      - checkout
      - restore_cache: *restore-npm-cache
      - run:
          name: Install Node modules
          command: yarn
      - save_cache: *save-npm-cache

  lint:
    <<: *defaults
    steps:
      - checkout
      - restore_cache: *restore-npm-cache
      - run: yarn lint

  publish:
    <<: *defaults
    executor: docker-publisher
    steps:
      - checkout
      - run:
          name: Setup .npmrc
          # command: echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" > ~/.npmrc
          command: printf "@modus:registry=https://npm.modus.app\n//npm.modus.app/:_authToken=\"%s\"" "$MODUS_NPM_TOKEN" >> ~/.npmrc
      - run: yarn
      - run: yarn lint
      - run: yarn test
      - run: yarn build
      - run: yarn lerna publish from-package --yes --registry https://npm.modus.app/

  publish-docker:
    <<: *defaults
    executor: docker-publisher
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - setup_remote_docker
      - run:
          name: Load archived Docker image
          command: docker load -i /tmp/workspace/gimbal.tar
      - run:
          name: Publish Docker Image to Docker Hub
          command: |
            echo "$DOCKERHUB_PASS" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin
            IMAGE_TAG=${CIRCLE_TAG/v/''}
            docker tag $IMAGE_NAME:latest $IMAGE_NAME:$IMAGE_TAG
            docker push $IMAGE_NAME:latest
            docker push $IMAGE_NAME:$IMAGE_TAG

  test:
    <<: *defaults
    steps:
      - checkout
      - restore_cache: *restore-npm-cache
      - run: yarn test

workflows:
  version: 2
  test-and-build:
    jobs:
      - install-dependencies:
          filters:
            tags:
              ignore: /^v.*/
      - lint:
          requires:
            - install-dependencies
          filters:
            tags:
              ignore: /^v.*/
      - test:
          requires:
            - install-dependencies
          filters:
            tags:
              ignore: /^v.*/
      - build:
          requires:
            - lint
            - test
          filters:
            tags:
              ignore: /^v.*/
  publish:
    jobs:
      - publish:
          context: deploy-creds
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v.*/
      # - build-docker:
      #     context: deploy-creds
      #     requires:
      #       - publish
      #     filters:
      #       branches:
      #         ignore: /.*/
      #       tags:
      #         only: /^v.*/
      # - publish-docker:
      #     context: deploy-creds
      #     requires:
      #       - build-docker
      #       - publish
      #     filters:
      #       branches:
      #         ignore: /.*/
      #       tags:
      #         only: /^v.*/
